/*
 Anwendungskontext: Brauerei
 Gruppenmitglieder [Vorname, Nachname, Matrikelnummer]:
 - Jan, Schulze, 7217725
 - Jonas, Goldbach, 7217641
 */

-- ====================================================================================
-- DROP SYNTAX
-- ====================================================================================


-- ----> DROP OPTION 1 (Löscht alles was es gibt, erzeugt keine Fehler) - Aus dem Internet.
-- ----> Quelle: https://stackoverflow.com/questions/1690404/how-to-drop-all-user-tables

/*
BEGIN
    FOR cur_rec IN (SELECT object_name, object_type
                    FROM user_objects
                    WHERE object_type IN
                          ('TABLE',
                           'VIEW',
                           'MATERIALIZED VIEW',
                           'PACKAGE',
                           'PROCEDURE',
                           'FUNCTION',
                           'SEQUENCE',
                           'SYNONYM',
                           'PACKAGE BODY',
                           'INDEX'
                              ))
        LOOP
            BEGIN
                IF cur_rec.object_type = 'TABLE'
                THEN
                    EXECUTE IMMEDIATE 'DROP '
                        || cur_rec.object_type
                        || ' "'
                        || cur_rec.object_name
                        || '" CASCADE CONSTRAINTS';
                ELSE
                    EXECUTE IMMEDIATE 'DROP '
                        || cur_rec.object_type
                        || ' "'
                        || cur_rec.object_name
                        || '"';
                END IF;
            EXCEPTION
                WHEN OTHERS
                    THEN
                        DBMS_OUTPUT.put_line ('FAILED: DROP '
                            || cur_rec.object_type
                            || ' "'
                            || cur_rec.object_name
                            || '"'
                        );
            END;
        END LOOP;
    FOR cur_rec IN (SELECT *
                    FROM all_synonyms
                    WHERE table_owner IN (SELECT USER FROM dual))
        LOOP
            BEGIN
                EXECUTE IMMEDIATE 'DROP PUBLIC SYNONYM ' || cur_rec.synonym_name;
            END;
        END LOOP;
END;
/
*/

-- ----> DROP OPTION 2 (Erzeugt Fehler, bei erster Ausführung) - Selbst programmiert


DROP TABLE BIERSORTE_ZUTAT CASCADE CONSTRAINTS;
DROP TABLE ZUTAT CASCADE CONSTRAINTS;
DROP TABLE LAGERBESTAND_LAGERABSCHNITT CASCADE CONSTRAINTS;
DROP TABLE LAGERABSCHNITT CASCADE CONSTRAINTS;
DROP TABLE LAGERBESTAND CASCADE CONSTRAINTS;
DROP TABLE LAGER CASCADE CONSTRAINTS;
DROP TABLE LAGERBEDINGUNG CASCADE CONSTRAINTS;
DROP TABLE VERPACKUNG CASCADE CONSTRAINTS;
DROP TABLE BEHAELTER CASCADE CONSTRAINTS;
DROP TABLE STANDORT CASCADE CONSTRAINTS;
DROP TABLE BIERSORTE CASCADE CONSTRAINTS;


-- ----> DROP OPTION 3 (Zeigt die Befehle nur an, führt aber nicht aus) - Aus dem Internet
-- ----> Quelle: https://stackoverflow.com/questions/1690404/how-to-drop-all-user-tables

-- select 'drop table '||table_name||' cascade constraints;' from user_tables;

-- ====================================================================================
-- ERSTELLUNG DER TABELLEN
-- ====================================================================================


CREATE TABLE BIERSORTE
(
    BIERSORTE_ID   INTEGER,
    BIERSORTE_NAME           VARCHAR2(20) NOT NULL,
    MARKE          VARCHAR2(20),
    ALKOHOLGEHALT  NUMBER(6, 4),
    MIN_TEMPERATUR NUMBER(6, 4),
    MAX_TEMPERATUR NUMBER(6, 4),
    PRIMARY KEY (BIERSORTE_ID),
    CONSTRAINT POSITIVE_NUMBER_CHECK CHECK (ALKOHOLGEHALT >= 0)
);

CREATE TABLE STANDORT
(
    STANDORT_ID INTEGER,
    PLZ         VARCHAR2(5),
    ORT         VARCHAR2(20),
    STRASSE     VARCHAR2(20),
    HAUSNUMMER  CHAR(5),
    GEBAUDE     VARCHAR2(20),
    RAUM        NUMBER(3, 0),
    PRIMARY KEY (STANDORT_ID),
    CONSTRAINT PRUEFE_PLZ CHECK (LENGTH(PLZ) = 5 AND REGEXP_LIKE(PLZ, '^[0-9]+$'))
);

CREATE TABLE BEHAELTER
(
    BEHAELTER_ID INTEGER,
    BIERSORTE_ID INTEGER,
    BEHAELTERTYP VARCHAR2(20),
    MATERIAL     VARCHAR2(50),
    FUELLMENGE   NUMBER(15, 3),
    KAPAZITAET NUMBER(15, 3),
    ABFUELLDATUM DATE,
    PRIMARY KEY (BEHAELTER_ID),
    FOREIGN KEY (BIERSORTE_ID) REFERENCES BIERSORTE (BIERSORTE_ID),
    CONSTRAINT FUELLMENGE_CHECK CHECK (FUELLMENGE <= KAPAZITAET)
);

CREATE TABLE VERPACKUNG
(
    VERPACKUNG_ID     INTEGER,
    SUB_VERPACKUNG_ID INTEGER,
    VERPACKUNG_NAME              VARCHAR2(20),
    ANZAHL_EINHEITEN  INTEGER,
    PRIMARY KEY (VERPACKUNG_ID),
    FOREIGN KEY (SUB_VERPACKUNG_ID) REFERENCES VERPACKUNG (VERPACKUNG_ID)
);

CREATE TABLE LAGERBEDINGUNG
(
    LAGERBEDINGUNG_ID INTEGER,
    TEMPERATUR        NUMBER(6, 4),
    LUFTFEUCHTIGKEIT  NUMBER(6, 5),
    PRIMARY KEY (LAGERBEDINGUNG_ID),
    CONSTRAINT LUFTFEUCHTIGKEIT_PROZENT_CHECK CHECK (LUFTFEUCHTIGKEIT >= 0 AND LUFTFEUCHTIGKEIT <= 0.2),
    CONSTRAINT TEMPERATUR_CHECK CHECK (TEMPERATUR >= 4 AND TEMPERATUR <= 15)
);

CREATE TABLE LAGER
(
    LAGER_ID    INTEGER,
    STANDORT_ID INTEGER,
    GROESSE     NUMBER(10, 2),
    PRIMARY KEY (LAGER_ID),
    FOREIGN KEY (STANDORT_ID) REFERENCES STANDORT (STANDORT_ID),
    CONSTRAINT LAGERGROESSE_CHECK CHECK (GROESSE >= 100)
);

CREATE TABLE LAGERBESTAND
(
    LAGERBESTAND_ID  INTEGER,
    BEHAELTER_ID     INTEGER NOT NULL,
    VERPACKUNG_ID    INTEGER NOT NULL,
    PRIMARY KEY (LAGERBESTAND_ID),
    FOREIGN KEY (BEHAELTER_ID) REFERENCES BEHAELTER (BEHAELTER_ID),
    FOREIGN KEY (VERPACKUNG_ID) REFERENCES VERPACKUNG (VERPACKUNG_ID)
);

CREATE TABLE LAGERABSCHNITT
(
    LAGERABSCHNITT_ID INTEGER,
    LAGERBEDINGUNG_ID INTEGER,
    LAGER_ID          INTEGER,
    GROESSE           NUMBER(8, 2),
    PRIMARY KEY (LAGERABSCHNITT_ID),
    FOREIGN KEY (LAGER_ID) REFERENCES LAGER (LAGER_ID),
    FOREIGN KEY (LAGERBEDINGUNG_ID) REFERENCES LAGERBEDINGUNG (LAGERBEDINGUNG_ID),
    CONSTRAINT LAGERABSCHNITTGROESSE_CHECK CHECK (GROESSE > 0)
);

CREATE TABLE LAGERBESTAND_LAGERABSCHNITT
(
    LAGERBESTAND_ID   INTEGER,
    LAGERABSCHNITT_ID INTEGER,
    ANZAHL            INTEGER,
    PRIMARY KEY (LAGERBESTAND_ID, LAGERABSCHNITT_ID),
    FOREIGN KEY (LAGERBESTAND_ID) REFERENCES LAGERBESTAND (LAGERBESTAND_ID),
    FOREIGN KEY (LAGERABSCHNITT_ID) REFERENCES LAGERABSCHNITT (LAGERABSCHNITT_ID)
);



CREATE TABLE ZUTAT
(
    ZUTAT_ID INTEGER,
    ZUTAT_NAME     Varchar2(20) UNIQUE NOT NULL,
    PRIMARY KEY (ZUTAT_ID)
);

CREATE TABLE BIERSORTE_ZUTAT
(
    BIERSORTE_ID INTEGER,
    ZUTAT_ID     INTEGER,
    MENGE        NUMBER(10, 4),
    EINHEIT      CHAR(4),
    Primary KEY (BIERSORTE_ID, ZUTAT_ID),
    FOREIGN KEY (BIERSORTE_ID) REFERENCES BIERSORTE (BIERSORTE_ID),
    FOREIGN KEY (ZUTAT_ID) REFERENCES ZUTAT (ZUTAT_ID)
);

-- Beispieldatensatz für Tests

-- BIERSORTE
INSERT INTO BIERSORTE (BIERSORTE_ID, BIERSORTE_NAME, MARKE, ALKOHOLGEHALT, MIN_TEMPERATUR, MAX_TEMPERATUR)
VALUES (1, 'Pils', 'Braumeister', 4.9, 4, 8);
INSERT INTO BIERSORTE (BIERSORTE_ID, BIERSORTE_NAME, MARKE, ALKOHOLGEHALT, MIN_TEMPERATUR, MAX_TEMPERATUR)
VALUES (2, 'Weizen', 'Bavarian King', 5.4, 4, 10);
INSERT INTO BIERSORTE (BIERSORTE_ID, BIERSORTE_NAME, MARKE, ALKOHOLGEHALT, MIN_TEMPERATUR, MAX_TEMPERATUR)
VALUES (3, 'Dunkel', 'Tradition', 5.6, 4, 9);
INSERT INTO BIERSORTE (BIERSORTE_ID, BIERSORTE_NAME, MARKE, ALKOHOLGEHALT, MIN_TEMPERATUR, MAX_TEMPERATUR)
VALUES (4, 'Helles', 'Münchner Freiheit', 5.1, 4, 8);
INSERT INTO BIERSORTE (BIERSORTE_ID, BIERSORTE_NAME, MARKE, ALKOHOLGEHALT, MIN_TEMPERATUR, MAX_TEMPERATUR)
VALUES (5, 'IPA', 'Hopfensturm', 6.5, 6, 10);

-- STANDORT
INSERT INTO STANDORT (STANDORT_ID, PLZ, ORT, STRASSE, HAUSNUMMER, GEBAUDE, RAUM)
VALUES (1, '80331', 'München', 'Brauereistr.', '1A', 'Hauptgebäude', 101);
INSERT INTO STANDORT (STANDORT_ID, PLZ, ORT, STRASSE, HAUSNUMMER, GEBAUDE, RAUM)
VALUES (2, '50667', 'Köln', 'Domstr.', '5', 'Nebengebäude', 202);
INSERT INTO STANDORT (STANDORT_ID, PLZ, ORT, STRASSE, HAUSNUMMER, GEBAUDE, RAUM)
VALUES (3, '20095', 'Hamburg', 'Hafenstr.', '12B', 'Lagerhaus', 301);

-- BEHAELTER
INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (1, 1, 'Fass', 'Edelstahl', 50.0, 50.0, TO_DATE('2024-01-01', 'YYYY-MM-DD'));
INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (2, 2, 'Flasche', 'Glas', 0.5, 0.5, TO_DATE('2024-02-15', 'YYYY-MM-DD'));
INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (3, 3, 'Keg', 'Aluminium', 30.0, 30.0, TO_DATE('2024-03-10', 'YYYY-MM-DD'));
INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (4, 4, 'Dose', 'Aluminium', 0.33, 0.33, TO_DATE('2024-01-25', 'YYYY-MM-DD'));
INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (5, 5, 'Fass', 'Edelstahl', 100.0, 100.0, TO_DATE('2024-02-28', 'YYYY-MM-DD'));

-- VERPACKUNG
INSERT INTO VERPACKUNG (VERPACKUNG_ID, SUB_VERPACKUNG_ID, Verpackung_NAME, ANZAHL_EINHEITEN)
VALUES (6, NULL, 'Charge', 5);
INSERT INTO VERPACKUNG (VERPACKUNG_ID, SUB_VERPACKUNG_ID, Verpackung_NAME, ANZAHL_EINHEITEN)
VALUES (5, 6, 'Plastikfolie', 1);
INSERT INTO VERPACKUNG (VERPACKUNG_ID, SUB_VERPACKUNG_ID, Verpackung_NAME, ANZAHL_EINHEITEN)
VALUES (4, 5, 'Palette', 50);
INSERT INTO VERPACKUNG (VERPACKUNG_ID, SUB_VERPACKUNG_ID, Verpackung_NAME, ANZAHL_EINHEITEN)
VALUES (3, 4, 'Kiste', 6);
INSERT INTO VERPACKUNG (VERPACKUNG_ID, SUB_VERPACKUNG_ID, Verpackung_NAME, ANZAHL_EINHEITEN)
VALUES (2, NULL, 'Palette', 50);
INSERT INTO VERPACKUNG (VERPACKUNG_ID, SUB_VERPACKUNG_ID, Verpackung_NAME, ANZAHL_EINHEITEN)
VALUES (1, 2, 'Karton', 6);


-- LAGERBEDINGUNG
INSERT INTO LAGERBEDINGUNG (LAGERBEDINGUNG_ID, TEMPERATUR, LUFTFEUCHTIGKEIT)
VALUES (1, 6.0, 0.15);
INSERT INTO LAGERBEDINGUNG (LAGERBEDINGUNG_ID, TEMPERATUR, LUFTFEUCHTIGKEIT)
VALUES (2, 8.0, 0.12);
INSERT INTO LAGERBEDINGUNG (LAGERBEDINGUNG_ID, TEMPERATUR, LUFTFEUCHTIGKEIT)
VALUES (3, 5.5, 0.18);

-- LAGER
INSERT INTO LAGER (LAGER_ID, STANDORT_ID, GROESSE)
VALUES (1, 1, 200.0);
INSERT INTO LAGER (LAGER_ID, STANDORT_ID, GROESSE)
VALUES (2, 2, 300.0);
INSERT INTO LAGER (LAGER_ID, STANDORT_ID, GROESSE)
VALUES (3, 3, 150.0);

-- LAGERBESTAND
INSERT INTO LAGERBESTAND (LAGERBESTAND_ID, BEHAELTER_ID, VERPACKUNG_ID)
VALUES (1, 1, 1);
INSERT INTO LAGERBESTAND (LAGERBESTAND_ID, BEHAELTER_ID, VERPACKUNG_ID)
VALUES (2, 2, 1);
INSERT INTO LAGERBESTAND (LAGERBESTAND_ID, BEHAELTER_ID, VERPACKUNG_ID)
VALUES (3, 3, 3);
INSERT INTO LAGERBESTAND (LAGERBESTAND_ID, BEHAELTER_ID, VERPACKUNG_ID)
VALUES (4, 4, 3);
INSERT INTO LAGERBESTAND (LAGERBESTAND_ID, BEHAELTER_ID, VERPACKUNG_ID)
VALUES (5, 5, 3);

-- LAGERABSCHNITT
INSERT INTO LAGERABSCHNITT (LAGERABSCHNITT_ID, LAGERBEDINGUNG_ID, LAGER_ID, GROESSE)
VALUES (1, 1, 1, 100.0);
INSERT INTO LAGERABSCHNITT (LAGERABSCHNITT_ID, LAGERBEDINGUNG_ID, LAGER_ID, GROESSE)
VALUES (2, 2, 2, 150.0);
INSERT INTO LAGERABSCHNITT (LAGERABSCHNITT_ID, LAGERBEDINGUNG_ID, LAGER_ID, GROESSE)
VALUES (3, 3, 3, 50.0);

-- LAGERBESTAND_LAGERABSCHNITT
INSERT INTO LAGERBESTAND_LAGERABSCHNITT (LAGERBESTAND_ID, LAGERABSCHNITT_ID, ANZAHL)
VALUES (1, 1, 20);
INSERT INTO LAGERBESTAND_LAGERABSCHNITT (LAGERBESTAND_ID, LAGERABSCHNITT_ID, ANZAHL)
VALUES (2, 2, 30);
INSERT INTO LAGERBESTAND_LAGERABSCHNITT (LAGERBESTAND_ID, LAGERABSCHNITT_ID, ANZAHL)
VALUES (3, 3, 10);
INSERT INTO LAGERBESTAND_LAGERABSCHNITT (LAGERBESTAND_ID, LAGERABSCHNITT_ID, ANZAHL)
VALUES (4, 1, 15);
INSERT INTO LAGERBESTAND_LAGERABSCHNITT (LAGERBESTAND_ID, LAGERABSCHNITT_ID, ANZAHL)
VALUES (5, 2, 25);

-- ZUTAT
INSERT INTO ZUTAT (ZUTAT_ID, Zutat_NAME)
VALUES (1, 'Wasser');
INSERT INTO ZUTAT (ZUTAT_ID, Zutat_NAME)
VALUES (2, 'Hopfen');
INSERT INTO ZUTAT (ZUTAT_ID, Zutat_NAME)
VALUES (3, 'Malz');
INSERT INTO ZUTAT (ZUTAT_ID, Zutat_NAME)
VALUES (4, 'Hefe');
INSERT INTO ZUTAT (ZUTAT_ID, Zutat_NAME)
VALUES (5, 'Gewürze');

-- BIERSORTE_ZUTAT
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (1, 1, 90.0, 'L');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (1, 2, 0.5, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (1, 3, 9.5, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (1, 4, 0.05, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (2, 1, 85.0, 'L');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (2, 2, 0.8, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (2, 3, 8.2, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (2, 4, 0.03, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (3, 1, 88.0, 'L');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (3, 2, 0.6, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (3, 3, 11.0, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (3, 4, 0.04, 'kg');
INSERT INTO BIERSORTE_ZUTAT (BIERSORTE_ID, ZUTAT_ID, MENGE, EINHEIT)
VALUES (3, 5, 0.02, 'kg');


--Erweiterung für Rekursive beziehungen:

-- Zusätzliche Behälter einfügen
INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (6, 1, 'Fass', 'Edelstahl', 50.0, 50.0, TO_DATE('2024-01-15', 'YYYY-MM-DD'));

INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (7, 2, 'Flasche', 'Glas', 0.33, 0.33, TO_DATE('2024-02-20', 'YYYY-MM-DD'));

INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (8, 3, 'Flasche', 'Glas', 0.5, 0.5, TO_DATE('2024-03-05', 'YYYY-MM-DD'));

INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (9, 4, 'Dose', 'Aluminium', 0.25, 0.25, TO_DATE('2024-01-10', 'YYYY-MM-DD'));

INSERT INTO BEHAELTER (BEHAELTER_ID, BIERSORTE_ID, BEHAELTERTYP, MATERIAL, FUELLMENGE, KAPAZITAET, ABFUELLDATUM)
VALUES (10, 5, 'Keg', 'Edelstahl', 30.0, 30.0, TO_DATE('2024-04-01', 'YYYY-MM-DD'));

commit;



